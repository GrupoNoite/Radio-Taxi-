Exploração de Dados e Pré-processamento

  key  fare_amount                                          pickup_datetime  \
0    2009-06-15 17:26:21.0000001          4.5  2009-06-15 17:26:21 UTC   
1    2010-01-05 16:52:16.0000002         16.9  2010-01-05 16:52:16 UTC   
2   2011-08-18 00:35:00.00000049          5.7  2011-08-18 00:35:00 UTC   
3    2012-04-21 04:30:42.0000001          7.7  2012-04-21 04:30:42 UTC   
4  2010-03-09 07:51:00.000000135          5.3  2010-03-09 07:51:00 UTC   

 pickup_longitude   pickup_latitude    dropoff_longitude     dropoff_latitude  \
0        -73.844311        40.721319            -73.841610                   40.712278   
1        -74.016048        40.711303            -73.979268                  40.782004   
2        -73.982738        40.761270            -73.991242                  40.750562   
3        -73.987130        40.733143            -73.991567                  40.758092   
4        -73.968095        40.768008            -73.956655                  40.783762   

passenger_count  
0                1  
1                1  
2                2  
3                1  
4                1  




Implementação de Modelos de Aprendizado de Máquina de Regressão Linear

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

np.random.seed(0)
tempo_espera = 5 + 10 * np.random.rand(100, 1)  
corridas = 200 - 10 * tempo_espera + np.random.randn(100, 1) * 5  

X_train, X_test, y_train, y_test = train_test_split(tempo_espera, corridas, test_size=0.2, random_state=0)

regressor = LinearRegression()
regressor.fit(X_train, y_train)

y_pred = regressor.predict(X_test)

print("Coeficiente:", regressor.coef_)
print("Intercepto:", regressor.intercept_)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("Mean Squared Error:", mse)
print("R² Score:", r2)

plt.scatter(X_test, y_test, color='blue', label='Dados reais')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Linha de Regressão')
plt.title('Regressão Linear - Rádio Táxi')
plt.xlabel('Tempo de Espera (min)')
plt.ylabel('Número de Corridas')
plt.legend()
plt.show()




 









Implementação de Modelos de Aprendizado de Máquina de Classificação

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt

# Carregar dados de exemplo
df = pd.DataFrame({
    "valor da tarifa": [4.5, 16.9, 5.7, 7.7, 5.3],
    "longitude de coleta": [-73.844311, -74.016048, -73.982738, -73.987130, -73.968095],
    "latitude de retirada": [40.721319, 40.711303, 40.761270, 40.733143, 40.768008],
    "longitude de desembarque": [-73.841610, -73.979268, -73.991242, -73.991567, -73.956655],
    "latitude de desembarque": [40.712278, 40.782004, 40.750562, 40.758092, 40.783762],
    "contagem de passageiros": [1, 1, 2, 1, 1]
})

# Definir a variável alvo (1 para alta demanda, 0 para baixa demanda com base na tarifa)
df['demanda_alta'] = df['valor da tarifa'].apply(lambda x: 1 if x > 10 else 0)

# Definir as features e a variável alvo
X = df[['longitude de coleta', 'latitude de retirada', 'longitude de desembarque', 'latitude de desembarque', 'contagem de passageiros']]
y = df['demanda_alta']

# Dividir os dados em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Instanciar o modelo de classificação
model = RandomForestClassifier()
model.fit(X_train, y_train)

# Fazer previsões
y_pred = model.predict(X_test)

# Avaliar o modelo
accuracy = accuracy_score(y_test, y_pred)
print(f'Acurácia: {accuracy}')
print(classification_report(y_test, y_pred))

# Gráfico de importância das features
importances = model.feature_importances_
plt.barh(X.columns, importances)
plt.xlabel('Importância das Variáveis')
plt.ylabel('Variáveis')
plt.title('Importância das Variáveis no Modelo de Classificação')
plt.show()



